# main_runner.py
import time
import sys
import os

# --- Configuraci√≥n del Path ---
# Esto asegura que el script puede encontrar los otros m√≥dulos
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.append(project_root)

# --- Importaciones de nuestros M√≥dulos ---
from app.db.db_manager import get_user_settings, record_trade, get_asset_id_by_name, get_daily_profit_loss
from app.logic.indicator_calculator import check_for_signal
from app.logic.pocket_option_executor import place_trade
from app.bot.notifier import send_telegram_message

# --- Constantes ---
# Asumimos que solo hay un admin. En el futuro, esto podr√≠a cambiar.
ADMIN_TELEGRAM_ID = 888319060 # Tu ID de Telegram

def main_cycle():
    """
    Realiza un ciclo completo de la l√≥gica del bot:
    1. Verifica el estado y la gesti√≥n de riesgo.
    2. Analiza el mercado en busca de se√±ales.
    3. Si hay se√±al, ejecuta la operaci√≥n (simulada).
    4. Registra el resultado en la base de datos.
    5. Notifica al usuario.
    """
    print(f"\n--- INICIANDO CICLO DE AN√ÅLISIS: {time.strftime('%Y-%m-%d %H:%M:%S')} ---")

    # 1. Obtener Configuraci√≥n y Verificar Estado
    settings = get_user_settings(ADMIN_TELEGRAM_ID)
    if not settings or not settings['is_active']:
        print("Bot detenido o sin configuraci√≥n. Ciclo finalizado.")
        return

    # 2. Verificar Gesti√≥n de Riesgo (SL/TP Diario)
    user_id = settings['user_id']
    daily_pl = get_daily_profit_loss(user_id)
    stop_loss = settings['stop_loss']
    take_profit = settings['take_profit']

    if daily_pl <= -stop_loss:
        print(f"üõë STOP LOSS DIARIO ALCANZADO (${daily_pl:.2f}). El bot no operar√° m√°s hoy.")
        return
    
    if daily_pl >= take_profit:
        print(f"üéØ TAKE PROFIT DIARIO ALCANZADO (${daily_pl:.2f}). El bot no operar√° m√°s hoy.")
        return

    # 3. Analizar el Mercado
    active_asset = settings.get('active_asset_name')
    db_timeframe = settings.get('timeframe')
    if not active_asset:
        print("‚ö†Ô∏è No hay un activo seleccionado para operar.")
        return
        
    yf_timeframe = db_timeframe.replace('M', '').lower() + 'm'
    print(f"Analizando {active_asset} en {db_timeframe}...")
    yf_ticker = f"{active_asset.replace('/', '')}=X"
    signal = check_for_signal(asset=yf_ticker, timeframe=yf_timeframe)

    # 4. Ejecutar si hay Se√±al
    if signal:
        print(f"üî•üî•üî• ¬°SE√ëAL ENCONTRADA!: {signal} en {active_asset} üî•üî•üî•")
        
        asset_id = get_asset_id_by_name(user_id, active_asset)
        payout = settings['payout_min']
        po_token = settings['po_token']
        account_type = settings['account_type']
        sequence_id = int(time.time())
        
        # --- L√≥gica de Ejecuci√≥n G0 ---
        amount_g0 = settings['base_amount']
        win_g0 = place_trade(active_asset, amount_g0, signal, db_timeframe, po_token, account_type)
        
        if win_g0:
            profit = amount_g0 * (payout / 100.0)
            record_trade(user_id, asset_id, signal, 'G0', amount_g0, payout, 'WIN', profit, sequence_id)
            send_telegram_message(ADMIN_TELEGRAM_ID, f"‚úÖ G0 en {active_asset} | Profit: ${profit:.2f}")
        else:
            loss = -amount_g0
            record_trade(user_id, asset_id, signal, 'G0', amount_g0, payout, 'LOSS', loss, sequence_id)
            send_telegram_message(ADMIN_TELEGRAM_ID, f"‚ùå G0 en {active_asset} | Loss: ${loss:.2f}")

            # --- L√≥gica de Martingale (G1) ---
            if settings['risk_strategy'] == 'MARTINGALE':
                send_telegram_message(ADMIN_TELEGRAM_ID, "Iniciando recuperaci√≥n G1...")
                amount_g1 = amount_g0 * 2
                win_g1 = place_trade(active_asset, amount_g1, signal, db_timeframe, po_token, account_type)
                
                if win_g1:
                    profit = amount_g1 * (payout / 100.0)
                    record_trade(user_id, asset_id, signal, 'G1', amount_g1, payout, 'WIN', profit, sequence_id)
                    send_telegram_message(ADMIN_TELEGRAM_ID, f"‚úÖ G1 en {active_asset} | Profit: ${profit:.2f} (Recuperada)")
                else:
                    loss = -amount_g1
                    record_trade(user_id, asset_id, signal, 'G1', amount_g1, payout, 'LOSS', loss, sequence_id)
                    send_telegram_message(ADMIN_TELEGRAM_ID, f"‚ùå G1 en {active_asset} | Loss: ${loss:.2f}")
    else:
        print("No se encontr√≥ ninguna se√±al v√°lida en este ciclo.")

    print(f"--- CICLO FINALIZADO: {time.strftime('%H:%M:%S')} ---")

if __name__ == "__main__":
    main_cycle()